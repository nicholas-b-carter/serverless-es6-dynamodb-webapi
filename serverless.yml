service: hamilton-webapi

plugins:
  - serverless-webpack
  - serverless-dynamodb-local

provider:
  name: aws
  profile: MadMobile
  runtime: nodejs4.3
  stage: prod
  region: us-east-1
  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
    - Effect: Deny
      Principal: "*"
      Action:
        - Update:Replace
        - Update:Delete
      Condition:
        StringEquals:
          ResourceType:
            - AWS::EC2::Instance
  apiKeys:
    - AKIAJZVCUIG56QUEAR3Q
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/orders*"]]

custom:
  webpackIncludeModules: true
  dynamodb:
    start:
      port: ${env:DYNAMODB_PORT}
      inMemory: true
      migration: true
    migration:
      dir: ./migrations

functions:
  getOrders:
    handler: handler.getOrders
    memory: 512
    timeout: 60
    events:
      - http:
          method: get
          path: orders
          cors: true

  getItem:
    handler: handler.getOrder
    memory: 512
    timeout: 60
    events:
      - http:
          method: get
          path: orders/{id}
          cors: true

  createItem:
    handler: handler.createOrder
    memory: 512
    timeout: 60
    events:
      - http:
          method: post
          path: orders
          cors: true

  updateItem:
    handler: handler.updateOrder
    memory: 512
    timeout: 60
    events:
      - http:
          method: patch
          path: orders/{id}
          cors: true

  deleteItem:
    handler: handler.deleteOrder
    memory: 512
    timeout: 60
    events:
      - http:
          method: delete
          path: orders/{id}
          cors: true

resources:
  Resources:
    ItemTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "orders"
